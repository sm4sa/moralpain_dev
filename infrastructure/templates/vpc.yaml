AWSTemplateFormatVersion: 2010-09-09
Description: >-
  # creates 2 public 2 private subnets in vpc with 128.168.00/16 cidr block
  # across just useast1 availability zone. it will also deploy igw with default route for public subnets

Resources:
  VPC: # vpc block
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 128.168.0.0/16 # 128.168.0.0 - 128.168.255.255
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "typedb-vpc-cfn"

  InternetGateway: #igw block
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: igw-typedb-1

  InternetGatewayAttachment: #attaches igw to vpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: 128.168.0.0/18 # 128.168.63.255
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: cfn-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: 128.168.64.0/18 # 128.168.127.255
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: cfn-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: 128.168.128.0/18 # 128.168.191.255
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: cfn-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: 128.168.192.0/18 # 128.168.255.255
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: cfn-private-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cfn-route-table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  cfnSecgroupPrivateEc2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable TCP connections from private subnets
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1729
          ToPort: 1729
          CidrIp: 128.168.128.0/18
        - IpProtocol: tcp
          FromPort: 1729
          ToPort: 1729
          CidrIp: 128.168.192.0/18
      VpcId: !Ref VPC

  sgAllLambda:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable any connections
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

# define outputs for VPC, subnets, and SGs
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  StackSG1:
    Description: The ID of the SG that only allows private
    Value: !Ref cfnSecgroupPrivateEc2
    Export:
      Name: !Sub "${AWS::StackName}-SGID1"
  StackSG2:
    Description: The ID of the SG that allows all
    Value: !Ref sgAllLambda
    Export:
      Name: !Sub "${AWS::StackName}-SGID2"
  PrivateSubnet1:
    Description: The ID of the first private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-privatesubnet1"
  PrivateSubnet2:
    Description: The ID of the second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-privatesubnet2"
  PublicSubnet1:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-publicsubnet1"
  PublicSubnet2:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-publicsubnet2"

  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-08c40ec9ead489470 #ubuntu ami
  #     InstanceType: t2.micro
  #     KeyName: "private_ec2_key"
  #     SubnetId: !Ref PrivateSubnet1
  #     SecurityGroupIds:
  #       - !Ref cfnSecgroupPrivateEc2
  #     Tags:
  #      - Key: Name
  #        Value: cfn-typedb-server-ctl
  #     UserData: |
  #           #!/bin/bash
  #           yum install httpd -y
  #           service httpd start
