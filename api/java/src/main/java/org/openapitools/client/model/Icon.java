/*
 * MoralDistress API
 * MoralDistress API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Icon
 */
@JsonPropertyOrder({
  Icon.JSON_PROPERTY_CODE_POINT,
  Icon.JSON_PROPERTY_FONT_FAMILY,
  Icon.JSON_PROPERTY_FONT_PACKAGE
})
@JsonTypeName("icon")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-12T00:57:02.835963-05:00[America/New_York]")
public class Icon {
  public static final String JSON_PROPERTY_CODE_POINT = "codePoint";
  private String codePoint;

  public static final String JSON_PROPERTY_FONT_FAMILY = "fontFamily";
  private String fontFamily;

  public static final String JSON_PROPERTY_FONT_PACKAGE = "fontPackage";
  private String fontPackage;

  public Icon() {
  }

  public Icon codePoint(String codePoint) {
    
    this.codePoint = codePoint;
    return this;
  }

   /**
   * Get codePoint
   * @return codePoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CODE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCodePoint() {
    return codePoint;
  }


  @JsonProperty(JSON_PROPERTY_CODE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodePoint(String codePoint) {
    this.codePoint = codePoint;
  }


  public Icon fontFamily(String fontFamily) {
    
    this.fontFamily = fontFamily;
    return this;
  }

   /**
   * Get fontFamily
   * @return fontFamily
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FONT_FAMILY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontFamily() {
    return fontFamily;
  }


  @JsonProperty(JSON_PROPERTY_FONT_FAMILY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
  }


  public Icon fontPackage(String fontPackage) {
    
    this.fontPackage = fontPackage;
    return this;
  }

   /**
   * Get fontPackage
   * @return fontPackage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FONT_PACKAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontPackage() {
    return fontPackage;
  }


  @JsonProperty(JSON_PROPERTY_FONT_PACKAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFontPackage(String fontPackage) {
    this.fontPackage = fontPackage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Icon icon = (Icon) o;
    return Objects.equals(this.codePoint, icon.codePoint) &&
        Objects.equals(this.fontFamily, icon.fontFamily) &&
        Objects.equals(this.fontPackage, icon.fontPackage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePoint, fontFamily, fontPackage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Icon {\n");
    sb.append("    codePoint: ").append(toIndentedString(codePoint)).append("\n");
    sb.append("    fontFamily: ").append(toIndentedString(fontFamily)).append("\n");
    sb.append("    fontPackage: ").append(toIndentedString(fontPackage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

