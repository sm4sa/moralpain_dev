/*
 * MoralDistress API
 * MoralDistress API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.AnalyticsResult;
import org.openapitools.client.model.Submissions;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-12T00:57:02.835963-05:00[America/New_York]")
public class AdminApi {
  private ApiClient apiClient;

  public AdminApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AdminApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get survey results
   * Fetch from the database all of the records that match the query parameters. 
   * @param starttime Minimum possible timestamp of a record in UTC seconds since Unix epoch. (optional)
   * @param endtime Maximum possible timestamp of a record in UTC seconds since Unix epoch. (optional)
   * @param minscore Minimum possible score of a record. (optional)
   * @param maxscore Maximum possible score of a record. (optional)
   * @param uuid If this parameter is specified, all other parameters are ignored and only the submission with the given UUID is fetched. If no such submission exists, an empty list is fetched.  (optional)
   * @return Submissions
   * @throws ApiException if fails to make API call
   */
  public Submissions getAdminSubmissions(Integer starttime, Integer endtime, Integer minscore, Integer maxscore, String uuid) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/admin/submissions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("starttime", starttime));
    localVarQueryParams.addAll(apiClient.parameterToPair("endtime", endtime));
    localVarQueryParams.addAll(apiClient.parameterToPair("minscore", minscore));
    localVarQueryParams.addAll(apiClient.parameterToPair("maxscore", maxscore));
    localVarQueryParams.addAll(apiClient.parameterToPair("uuid", uuid));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Submissions> localVarReturnType = new TypeReference<Submissions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get data analysis
   * Perform an analysis on the records in the database that match the query paramters. 
   * @param operation The analytic operation to perform on the data. (required)
   * @param starttime Minimum possible timestamp of a record in UTC seconds since Unix epoch. (optional)
   * @param endtime Maximum possible timestamp of a record in UTC seconds since Unix epoch. (optional)
   * @return AnalyticsResult
   * @throws ApiException if fails to make API call
   */
  public AnalyticsResult getAnalytics(String operation, Integer starttime, Integer endtime) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'operation' is set
    if (operation == null) {
      throw new ApiException(400, "Missing the required parameter 'operation' when calling getAnalytics");
    }
    
    // create path and map variables
    String localVarPath = "/admin/analytics";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("starttime", starttime));
    localVarQueryParams.addAll(apiClient.parameterToPair("endtime", endtime));
    localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AnalyticsResult> localVarReturnType = new TypeReference<AnalyticsResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
