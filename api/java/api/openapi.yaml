openapi: 3.0.1
info:
  description: MoralDistress API.
  title: MoralDistress API
  version: 1.0.0
  x-logo:
    url: https://moralpain-site.s3.amazonaws.com/docs/assets/icon.svg
    altText: MoralDistress Logo
servers:
- url: /
paths:
  /survey:
    get:
      description: |
        Fetch the latest moral distress questionnaire (MDQ) from the database.
      operationId: getSurvey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/survey'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get the MDQ
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: "arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/questionnaire.json"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_survey_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsSurvey
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS survey support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      description: |
        Submit a completed Moral Distress Questionnaire and Moral Distress Score to the database.
      operationId: submitSurvey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submission'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Submit a completed MDQ
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitSurvey/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_completed_survey_post_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  /resiliency:
    get:
      description: |
        Fetch the recommended resiliency resources from the database.
      operationId: getResiliencyResources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resiliencyResources'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get resiliency resources
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: "arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/resiliency_resources.json"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_resiliency_resources_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsVisitedResiliencyResources
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS resiliency resources support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      description: |
        Submit the list of resources visited by this user to the database.
      operationId: submitVisitedResiliencyResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/visitedResiliencyResources'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Submit visited resiliency resources
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitVisitedResiliencyResources/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_visited_resources_post_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  /admin/submissions:
    get:
      description: |
        Fetch from the database all of the records that match the query parameters.
      operationId: getAdminSubmissions
      parameters:
      - description: Minimum possible timestamp of a record in UTC seconds since Unix
          epoch.
        example: 1640995200
        explode: true
        in: query
        name: starttime
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum possible timestamp of a record in UTC seconds since Unix
          epoch.
        example: 1647907200
        explode: true
        in: query
        name: endtime
        required: false
        schema:
          type: integer
        style: form
      - description: Minimum possible score of a record.
        example: 1
        explode: true
        in: query
        name: minscore
        required: false
        schema:
          maximum: 10
          minimum: 0
          type: integer
        style: form
      - description: Maximum possible score of a record.
        example: 5
        explode: true
        in: query
        name: maxscore
        required: false
        schema:
          maximum: 10
          minimum: 0
          type: integer
        style: form
      - description: |
          If this parameter is specified, all other parameters are ignored and only the submission with the given UUID is fetched. If no such submission exists, an empty list is fetched.
        example: f2f2011c8d2547849dfce99ae4b75797
        explode: true
        in: query
        name: uuid
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submissions'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get survey results
      tags:
      - Admin
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:FetchSubmissions/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_admin_submissions_get_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsAdminSubmissions
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS admin submissions support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /admin/analytics:
    get:
      description: |
        Perform an analysis on the records in the database that match the query paramters.
      operationId: getAnalytics
      parameters:
      - description: Minimum possible timestamp of a record in UTC seconds since Unix
          epoch.
        example: 1640995200
        explode: true
        in: query
        name: starttime
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum possible timestamp of a record in UTC seconds since Unix
          epoch.
        example: 1647907200
        explode: true
        in: query
        name: endtime
        required: false
        schema:
          type: integer
        style: form
      - description: The analytic operation to perform on the data.
        example: count
        explode: true
        in: query
        name: operation
        required: true
        schema:
          enum:
          - average
          - count
          - maximum
          - minimum
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyticsResult'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                type: string
          description: 400 Bad Request
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get data analysis
      tags:
      - Admin
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AnalyzeSubmissions/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_admin_analytics_get_role"
        passthroughBehavior: when_no_match
        responses:
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsAdminAnalytics
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS admin analytics support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /submission:
    get:
      description: |
        Get the MDQ submission.
      operationId: getSubmission
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submission'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: get the submission
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:TestFetchSubmissionField/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_submission_timestamp_get_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsSubmission
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS submission support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      description: |
        Submit
      operationId: submitSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submission'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Submit a submission
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:TestSubmitSubmissionField/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/apigateway_submission_timestamp_post_role"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  /submissions:
    get:
      description: |
        Get the MDQ submissions using TypeDB.
      operationId: getSubmissions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submissions'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: get the submissions
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetSubmissions/invocations"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
    options:
      description: |
        Enable CORS by returning correct headers
      operationId: optionsSubmissionTypeDB
      responses:
        "200":
          content: {}
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: CORS submission support
      tags:
      - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      description: |
        Submit with TypeDB
      operationId: submitSubmissionTypeDB
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submission'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      summary: Submit a submission
      tags:
      - User
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PostSubmissions/invocations"
        passthroughBehavior: when_no_match
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
components:
  schemas:
    survey:
      example:
        version: version
        sections:
        - subtitle: subtitle
          options:
          - description: description
            id: id
          - description: description
            id: id
          sectionId: sectionId
          title: title
        - subtitle: subtitle
          options:
          - description: description
            id: id
          - description: description
            id: id
          sectionId: sectionId
          title: title
      properties:
        version:
          type: string
        sections:
          items:
            $ref: '#/components/schemas/surveySection'
          type: array
      type: object
    surveySection:
      example:
        subtitle: subtitle
        options:
        - description: description
          id: id
        - description: description
          id: id
        sectionId: sectionId
        title: title
      properties:
        sectionId:
          type: string
        title:
          type: string
        subtitle:
          type: string
        options:
          items:
            $ref: '#/components/schemas/surveyOption'
          type: array
      type: object
    surveyOption:
      example:
        description: description
        id: id
      properties:
        id:
          type: string
        description:
          type: string
      type: object
    submissions:
      example:
        list:
        - score: 0
          selections:
          - selections
          - selections
          id: id
          timestamp: 6
        - score: 0
          selections:
          - selections
          - selections
          id: id
          timestamp: 6
      properties:
        list:
          items:
            $ref: '#/components/schemas/submission'
          type: array
      type: object
    submission:
      example:
        score: 0
        selections:
        - selections
        - selections
        id: id
        timestamp: 6
      properties:
        score:
          type: integer
        selections:
          items:
            type: string
          type: array
        timestamp:
          type: integer
        id:
          type: string
      type: object
    resiliencyResources:
      example:
        resources:
        - resourceId: resourceId
          icon:
            fontPackage: fontPackage
            fontFamily: fontFamily
            codePoint: codePoint
          description: description
          title: title
          url: url
        - resourceId: resourceId
          icon:
            fontPackage: fontPackage
            fontFamily: fontFamily
            codePoint: codePoint
          description: description
          title: title
          url: url
        version: version
      properties:
        version:
          type: string
        resources:
          items:
            $ref: '#/components/schemas/resiliencyResource'
          type: array
      type: object
    resiliencyResource:
      example:
        resourceId: resourceId
        icon:
          fontPackage: fontPackage
          fontFamily: fontFamily
          codePoint: codePoint
        description: description
        title: title
        url: url
      properties:
        resourceId:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        icon:
          $ref: '#/components/schemas/icon'
      type: object
    icon:
      example:
        fontPackage: fontPackage
        fontFamily: fontFamily
        codePoint: codePoint
      properties:
        codePoint:
          type: string
        fontFamily:
          type: string
        fontPackage:
          type: string
      type: object
    visitedResiliencyResources:
      properties:
        selections:
          items:
            type: string
          type: array
        timestamp:
          type: integer
      type: object
    analyticsResult:
      example:
        result: 0.8008281904610115
        error: true
        operation: average
        errormsg: errormsg
      properties:
        operation:
          enum:
          - average
          - count
          - maximum
          - minimum
          type: string
        result:
          type: number
        error:
          type: boolean
        errormsg:
          type: string
      type: object
  securitySchemes:
    UserPool:
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
        - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_pqNwySoyF"

